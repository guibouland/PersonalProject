# LEARN MORE

## Methodology
Welcome to our "Weather Forecast in Montpellier" website. You can find in the [Home](index.qmd) page two tables made using an HMTL function in the *IPython.display* module, you can see the source code [here](https://github.com/guibouland/PersonalProject/blob/main/index.qmd). We request the API URL with the desired parameters from the [open-meteo website](https://open-meteo.com/en/docs/meteofrance-api) and extract the data to make a table that displays the information we are seeking.
The second table displays, in order, the dates, the weather images and their descriptions, the minimal and maximal temperatures, the sums and hours of precipitation, the average winds and their dominant directions a,d the sunrises and sunsets hours.


## Bonus
Here's a table forecasting the 6 following days. However, the data doesn't come form MeteoFrance but from the general "Weather Forecast" tab in the [website](https://open-meteo.com/en/docs).

```{python}
import pandas as pd
import requests
import json
import csv
from datetime import datetime, timedelta
from IPython.display import HTML
```

```{python}

# Initialisation WMO images
with open("descriptions.json", "r") as json_file:
    descriptions = json.load(json_file)


# Images loop
for code_wmo, value in descriptions.items():
    description = value["description"]
    image_url = value["image"]


# Function that returns the image URL
def image_url(code_wmo):
    if code_wmo in descriptions:
        return descriptions[code_wmo]["image"]
    else:
        return "WMO code not found"

```
```{python}
"""
Hourly data
"""

# Hourly data API extraction
url_hourly = "https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,windspeed_10m&timezone=Europe%2FLondon"
response_hourly = requests.get(url_hourly)

# URL verification
if response_hourly.status_code == 200:
    data_hourly = response_hourly.json()
    # Hourly dataframe creation
    df_hourly = pd.DataFrame(data_hourly)

    # Associated CSV file creation
    df_hourly.to_csv("df_hourly.csv", index=False)

    # Hourly data extraction
    temp_hourly = data_hourly["hourly"]["temperature_2m"]
    wind_hourly = data_hourly["hourly"]["windspeed_10m"]

    # We calculate the mean wind for the next 7 days
    size = 24
    # We create 7 sub-lists that each contains 24 different values (1 per hour)
    sub_lists = [
        wind_hourly[idx : idx + size] for idx in range(0, len(wind_hourly), size)
    ]

    # We create the function to calculate the mean of each sub-list
    def average_wind_daily():
        vent_moy = []
        for i in range(7):
            sub_lists[i] = [j for j in sub_lists[i] if j is not None]
            # We calculate the mean of each sub-list considering the changes if there was any None (len diminishes if that's the case)
            xmoy = sum(sub_lists[i]) / len(sub_lists[i])
            # We append each mean to a list that will contains all the means
            vent_moy.append(round(xmoy, 2))
        return vent_moy

    # Extraction of the hours (ignoring the date of the day)
    time_hourly = []
    for i in range(len(df_hourly["hourly"]["time"])):
        time_hourly.append(df_hourly["hourly"]["time"][i][-5:])
else:
    print("Data retrieval error")

vent_moy = average_wind_daily()  # List of the mean winds for the next 7 days
```

```{python}

"""
DATA DAILY
"""

# Daily data extraction
url_daily = "https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,uv_index_max,precipitation_sum,precipitation_hours,precipitation_probability_max,winddirection_10m_dominant&timezone=Europe%2FLondon"
response_daily = requests.get(url_daily)

# Request verification
if response_daily.status_code == 200:
    data_daily = response_daily.json()
    # Daily dataframe creation
    df_daily = pd.DataFrame(data_daily)
    # print(df_daily.iloc[:, -1])
    pd.set_option("display.max_rows", None)

    # Associated CSV file creation
    df_daily.to_csv("df_daily.csv", index=False)
    # Daily data extraction
    tempmax = data_daily["daily"]["temperature_2m_max"]
    tempmin = data_daily["daily"]["temperature_2m_min"]
    wmo_daily = data_daily["daily"]["weathercode"]
    sunrise = data_daily["daily"]["sunrise"]
    sunset = data_daily["daily"]["sunset"]
    uv = data_daily["daily"]["uv_index_max"]
    precip_daily_sum = data_daily["daily"]["precipitation_sum"]
    precip_proba_daily = data_daily["daily"]["precipitation_probability_max"]
    precip_hours_daily = data_daily["daily"]["precipitation_hours"]
    wind_direc_daily = data_daily["daily"]["winddirection_10m_dominant"]
else:
    print("Data retrieval error")


# Date initialization
Date = pd.to_datetime(data_daily["daily"]["time"])
Date = [datetime.strftime(a, "%A %d/%m") for a in Date]

# Hour modification sunrise and sunset
sunsetchanged = []
for i in range(len(df_daily["daily"]["sunset"])):
    # We take the sunset hours
    h = f'{df_daily["daily"]["sunset"][i][-5:]}'

    # We convert them in datetime object
    heure_objet = datetime.strptime(h, "%H:%M")

    # We add up 1 hour
    nouvelle_heure = heure_objet + timedelta(hours=1)

    # We transform the new hour in "hh:mm" format
    nouv_h_format = nouvelle_heure.strftime("%H:%M")

    # We put the changed hours in the list
    sunsetchanged.append(nouv_h_format)
sunrisechanged = []
for i in range(len(df_daily["daily"]["sunrise"])):
    # We take the sunrise hours
    h = f'{df_daily["daily"]["sunrise"][i][-5:]}'

    # We convert them in datetime object
    heure_objet = datetime.strptime(h, "%H:%M")

    # We add up 1 hour
    nouvelle_heure = heure_objet + timedelta(hours=1)

    # We transform the new hour in "hh:mm" format
    nouv_h_format = nouvelle_heure.strftime("%H:%M")

    # We put the changed hours in the list
    sunrisechanged.append(nouv_h_format)
```
```{python}

"""
HTML table of DAILY FORECAST
"""

tabledaily = f"""
<table style="margin: 0 auto;">
  <tr>
    <th style ="background-color: rgb(240, 240, 240);"></th> <!-- Case vide -->
    <th style="text-align: center;background-color: rgb(240, 240, 240); ">{Date[0]}</th>
    <th style="text-align: center;background-color: rgb(240, 240, 240); ">{Date[1]}</th>
    <th style="text-align: center;background-color: rgb(240, 240, 240); ">{Date[2]}</th>
    <th style="text-align: center;background-color: rgb(240, 240, 240); ">{Date[3]}</th>
    <th style="text-align: center;background-color: rgb(240, 240, 240); ">{Date[4]}</th>
    <th style="text-align: center;background-color: rgb(240, 240, 240); ">{Date[5]}</th>
  </tr>
    <td style="text-align: center;"><strong>WMO</strong></td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_daily[0])]['image']}><br>{descriptions[str(wmo_daily[0])]['description']}</td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_daily[1])]['image']}><br>{descriptions[str(wmo_daily[1])]['description']}</td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_daily[2])]['image']}><br>{descriptions[str(wmo_daily[2])]['description']}</td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_daily[3])]['image']}><br>{descriptions[str(wmo_daily[3])]['description']}</td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_daily[4])]['image']}><br>{descriptions[str(wmo_daily[4])]['description']}</td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_daily[5])]['image']}><br>{descriptions[str(wmo_daily[5])]['description']}</td>
  </tr>
  <tr>
    <td style="text-align: center;"><strong>Temperature</strong></td>
    <td style="text-align: center;">{tempmin[0]}°C-{tempmax[0]}°C</td>
    <td style="text-align: center;">{tempmin[1]}°C-{tempmax[1]}°C</td>
    <td style="text-align: center;">{tempmin[2]}°C-{tempmax[2]}°C</td>
    <td style="text-align: center;">{tempmin[3]}°C-{tempmax[3]}°C</td>
    <td style="text-align: center;">{tempmin[4]}°C-{tempmax[4]}°C</td>
    <td style="text-align: center;">{tempmin[5]}°C-{tempmax[5]}°C</td>
  </tr>
  <tr>
    <td style="text-align: center;"><strong>UV</strong></td>
    <td style="text-align: center;">{uv[0]}</td>
    <td style="text-align: center;">{uv[1]}</td>
    <td style="text-align: center;">{uv[2]}</td>
    <td style="text-align: center;">{uv[3]}</td>
    <td style="text-align: center;">{uv[4]}</td>
    <td style="text-align: center;">{uv[5]}</td>
  </tr>
  <tr>
    <td style="text-align: center;"><strong>Precipitations</strong></td>
    <td style="text-align: center;">{precip_daily_sum[0]}mm<br><img src = "goutte.png"> {precip_proba_daily[0]}%</td>
    <td style="text-align: center;">{precip_daily_sum[1]}mm<br><img src = "goutte.png"> {precip_proba_daily[1]}%</td>
    <td style="text-align: center;">{precip_daily_sum[2]}mm<br><img src = "goutte.png"> {precip_proba_daily[2]}%</td>
    <td style="text-align: center;">{precip_daily_sum[3]}mm<br><img src = "goutte.png"> {precip_proba_daily[3]}%</td>
    <td style="text-align: center;">{precip_daily_sum[4]}mm<br><img src = "goutte.png"> {precip_proba_daily[4]}%</td>
    <td style="text-align: center;">{precip_daily_sum[5]}mm<br><img src = "goutte.png"> {precip_proba_daily[5]}%</td>
  </tr>
  <tr>
    <td style="text-align: center;"><strong>Wind</strong></td>
    <td style="text-align: center; vertical-align: middle; ">
      {vent_moy[0]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[0]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td style="text-align: center; vertical-align: middle; ">
      {vent_moy[1]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[1]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td style="text-align: center; vertical-align: middle; ">
      {vent_moy[2]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[2]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td style="text-align: center; vertical-align: middle; ">
      {vent_moy[3]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[3]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td style="text-align: center; vertical-align: middle; ">
      {vent_moy[4]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[4]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td style="text-align: center; vertical-align: middle; ">
      {vent_moy[5]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[5]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
  </tr>
  <tr>
    <td style="text-align: center;"><strong>Sunrise/Sunset</strong></td>
    <td style="text-align: center;">{sunrisechanged[0]} - {sunsetchanged[0]}</td>
    <td style="text-align: center;">{sunrisechanged[1]} - {sunsetchanged[1]}</td>
    <td style="text-align: center;">{sunrisechanged[2]} - {sunsetchanged[2]}</td>
    <td style="text-align: center;">{sunrisechanged[3]} - {sunsetchanged[3]}</td>
    <td style="text-align: center;">{sunrisechanged[4]} - {sunsetchanged[4]}</td>
    <td style="text-align: center;">{sunrisechanged[5]} - {sunsetchanged[5]}</td>
  </tr>
</table>
"""

# HTML table rendering
HTML(tabledaily)
```

