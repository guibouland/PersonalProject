---
execute:
    echo: false
---
```{python}
import pandas as pd
import requests
import json
import csv
from datetime import datetime, timedelta, date
from IPython.display import HTML, display
```

```{python}

# Initialisation WMO images
with open("descriptions.json", "r") as json_file:
    descriptions = json.load(json_file)


# Images loop
for code_wmo, value in descriptions.items():
    description = value["description"]
    image_url = value["image"]


# Function that returns the image URL
def image_url(code_wmo):
    if code_wmo in descriptions:
        return descriptions[code_wmo]["image"]
    else:
        return "WMO code not found"

# Date update for the URLs
start_date = date.today()
end_date = start_date + timedelta(4) # We use the timedelta class to "add" 4 days to obtain the date in 5 days from today
start_date = start_date.isoformat() # We change its format to iso
end_date = end_date.isoformat()
```

```{python}
"""
DATA NOW
"""

# Current data API extraction
url_current = "https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&current=temperature_2m,precipitation,weathercode,windspeed_10m,winddirection_10m&timezone=Europe%2FLondon"
response_current = requests.get(url_current)

# URL verification
if response_current.status_code == 200:
    data_current = response_current.json()

    # Current dataframe creation
    df_current = pd.DataFrame(data_current)
    # print(df_current.iloc[:, -1])

    # Associated CSV file creation
    df_current.to_csv("df_current.csv", index=False)

    # Current data extraction
    date_now = data_current["current"]["time"][:10]
    # print(date_now)
    temp_now = data_current["current"]["temperature_2m"]
    precip_now = data_current["current"]["precipitation"]
    wmo_now = data_current["current"]["weathercode"]
    wind_now = data_current["current"]["windspeed_10m"]
    wind_direc_now = data_current["current"]["winddirection_10m"]
    hour_now = data_current["current"]["time"][-5:]
else:
    print("Data retrieval error")

# We change "hour_now" because of the delay
h = hour_now
# We transform them in datetime object
heure_objet = datetime.strptime(h, "%H:%M")
# We add up 1 hour
nouvelle_heure = heure_objet + timedelta(hours=1)
# We convert the new hour in "hh:mm" format
hour_now_changed = nouvelle_heure.strftime("%H:%M")
```

```{python}
"""
DATA DAILY
"""

# Daily data API extraction
url_daily = f"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,precipitation_hours,winddirection_10m_dominant&timezone=Europe%2FLondon&start_date={start_date}&end_date={end_date}"
response_daily = requests.get(url_daily)

# Request verification
if response_daily.status_code == 200:
    data_daily = response_daily.json()
    # Daily dataframe creation
    df_daily = pd.DataFrame(data_daily)
    # print(df_daily.iloc[:, -1])
    pd.set_option("display.max_rows", None)

    # Associated CSV file creation
    df_daily.to_csv("df_daily.csv", index=False)

    # Daily data extraction
    tempmax = data_daily["daily"]["temperature_2m_max"]
    tempmin = data_daily["daily"]["temperature_2m_min"]
    wmo_daily = data_daily["daily"]["weathercode"]
    sunrise = data_daily["daily"]["sunrise"]
    sunset = data_daily["daily"]["sunset"]
    precip_daily_sum = data_daily["daily"]["precipitation_sum"]
    precip_hours_daily = data_daily["daily"]["precipitation_hours"]
    wind_direc_daily = data_daily["daily"]["winddirection_10m_dominant"]
else:
    print("Data retrieval error")


# Date initialization
Date = pd.to_datetime(data_daily["daily"]["time"])
Date = [datetime.strftime(a, "%A %d/%m") for a in Date]

# Hour modification sunrise and sunset
sunsetchanged = []
for i in range(len(df_daily["daily"]["sunset"])):
    # We take the sunset hours
    h = f'{df_daily["daily"]["sunset"][i][-5:]}'

    # We convert them in datetime object
    heure_objet = datetime.strptime(h, "%H:%M")

    # We add up 1 hour
    nouvelle_heure = heure_objet + timedelta(hours=1)

    # We transform the new hour in "hh:mm" format
    nouv_h_format = nouvelle_heure.strftime("%H:%M")

    # We put the changed hours in the list
    sunsetchanged.append(nouv_h_format)
sunrisechanged = []
for i in range(len(df_daily["daily"]["sunrise"])):
    # We take the sunrise hours
    h = f'{df_daily["daily"]["sunrise"][i][-5:]}'

    # We convert them in datetime object
    heure_objet = datetime.strptime(h, "%H:%M")

    # We add up 1 hour
    nouvelle_heure = heure_objet + timedelta(hours=1)

    # We transform the new hour in "hh:mm" format
    nouv_h_format = nouvelle_heure.strftime("%H:%M")

    # We put the changed hours in the list
    sunrisechanged.append(nouv_h_format)

# We change the None objects to "-"
for i in range(len(precip_daily_sum)):
    if precip_daily_sum[i] == None:
        precip_daily_sum[i] = "- "

for i in range(len(wind_direc_daily)):
    if wind_direc_daily[i] == None:
        wind_direc_daily[i] = "- "

```

```{python}
"""
Hourly data
"""

# Hourly data API extraction
url_hourly = f"https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,windspeed_10m&timezone=Europe%2FLondon&start_date={start_date}&end_date={end_date}"
response_hourly = requests.get(url_hourly)

# URL verification
if response_hourly.status_code == 200:
    data_hourly = response_hourly.json()
    # Hourly dataframe creation
    df_hourly = pd.DataFrame(data_hourly)

    # Associated CSV file creation
    df_hourly.to_csv("df_hourly.csv", index=False)

    # Hourly data extraction
    temp_hourly = data_hourly["hourly"]["temperature_2m"]
    wind_hourly = data_hourly["hourly"]["windspeed_10m"]

    # We calculate the mean wind for the next 5 days
    size = 24
    # We create 5 sub-lists that each contains 24 different values (1 per hour)
    sub_lists = [
        wind_hourly[idx : idx + size] for idx in range(0, len(wind_hourly), size)
    ]

    # We create the function to calculate the mean of each sub-list
    def average_wind_daily():
        """
        AVERAGE WIND DAILY

        We use the hourly wind data of the next 5 days to calculate the average wind by creating 5 sub-lists that each contain 24 wind values. Each value corresponds to an hour of the day.

        First, we set an empty list called "vent_moy", it is the list that will be returned at the end of the function.

        Due to some mismeasurement of the tools used by MétéoFrance, sometimes we have 'None' values that hinder us in our further calculations, so we want to not include them in the sub-lists, even if it diminishes their lenght:
            sub_lists[i] = [j for j in sub_lists[i] if j is not None]
        
        Having the sub-lists set, we wan tnow to calculate the mean of each sub-list, but we face another problem. Due to the API, sometimes we don't have any value for a given day, so we can't divide by the lenght of the sub-list (division by 0) or it would end in an error and the whole project won't publish itself.
        In order to resolve this issue, we append "- " in the final list if the lenght of a sub-lists equals 0, or the mean of a sub-list if its lenght is strictly superior than 0.
            if len(sub_lists[i]) == 0:
                xmoy = "- "vent_moy.append(round(xmoy, 2))
                vent_moy.append(xmoy)
            else:
                xmoy = sum(sub_lists[i]) / len(sub_lists[i])
                vent_moy.append(round(xmoy, 2))
        
        And finally, we can return the final list "vent_moy"

        """
        vent_moy = []
        for i in range(5):
            sub_lists[i] = [j for j in sub_lists[i] if j is not None]
            if len(sub_lists[i]) == 0:
                xmoy = "- "
                vent_moy.append(xmoy)
            else:
                xmoy = sum(sub_lists[i]) / len(sub_lists[i])
                vent_moy.append(round(xmoy, 2))            
        return vent_moy

    # Extraction of the hours (ignoring the date of the day)
    time_hourly = []
    for i in range(len(df_hourly["hourly"]["time"])):
        time_hourly.append(df_hourly["hourly"]["time"][i][-5:])
else:
    print("Data retrieval error")

vent_moy = average_wind_daily()  # List of the mean winds for the next 5 days
```
# CURRENTLY

```{python}
"""
HTML table of the CURRENT DATA
"""

tablenow = f"""
<table>
  <tr>
    <th style="text-align: center;"><strong>Date</strong></th>
    <th style="text-align: center;"><strong>WMO</strong></th>
    <th style="text-align: center;"><strong>Temperature</strong></th>
    <th style="text-align: center;"><strong>Precipitation</strong></th>
    <th style="text-align: center;"><strong>Wind</strong></th>
  </tr>
  <tr>
    <td style="text-align: center; vertical-align: middle;">{Date[0]}<br><strong>{hour_now_changed}</strong></td>
    <td style="background-color: rgb(210,235,242); text-align: center;"><img src ={descriptions[str(wmo_now)]['image']}><br>{descriptions[str(wmo_now)]['description']}</td>
    <td style="text-align: center; vertical-align: middle;">{temp_now} °C</td>
    <td style="text-align: center; vertical-align: middle;">{precip_now} mm</td>
    <td style="text-align: center; vertical-align: middle;">{wind_now} km/h
    <br>
    <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_now}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
  </tr>
</table>
"""

# HTML table rendering
display(HTML(tablenow))
```

# FORECAST

```{python}
"""
HTML table of DAILY FORECAST
"""

tabledaily = f"""
<table style="margin: 0 auto; position: relative; width: 60px; height: 60px; text-align: center; vertical-align: middle;">
  <tr>
    <th style="background-color: rgb(240, 240, 240); ">{Date[0][:-5]}<br>{Date[0][-5:]}</th>
    <th style="background-color: rgb(240, 240, 240); ">{Date[1][:-5]}<br>{Date[1][-5:]}</th>
    <th style="background-color: rgb(240, 240, 240); ">{Date[2][:-5]}<br>{Date[2][-5:]}</th>
    <th style="background-color: rgb(240, 240, 240); ">{Date[3][:-5]}<br>{Date[3][-5:]}</th>
    <th style="background-color: rgb(240, 240, 240); ">{Date[4][:-5]}<br>{Date[4][-5:]}</th>
  </tr>
    <td style="background-color: rgb(210,235,242);"><img src ={descriptions[str(wmo_daily[0])]['image']}><br>{descriptions[str(wmo_daily[0])]['description']}</td>
    <td style="background-color: rgb(210,235,242);"><img src ={descriptions[str(wmo_daily[1])]['image']}><br>{descriptions[str(wmo_daily[1])]['description']}</td>
    <td style="background-color: rgb(210,235,242);"><img src ={descriptions[str(wmo_daily[2])]['image']}><br>{descriptions[str(wmo_daily[2])]['description']}</td>
    <td style="background-color: rgb(210,235,242);"><img src ={descriptions[str(wmo_daily[3])]['image']}><br>{descriptions[str(wmo_daily[3])]['description']}</td>
    <td style="background-color: rgb(210,235,242);"><img src ={descriptions[str(wmo_daily[4])]['image']}><br>{descriptions[str(wmo_daily[4])]['description']}</td>
  </tr>
  <tr>
    <td>{tempmin[0]}°C-{tempmax[0]}°C</td>
    <td>{tempmin[1]}°C-{tempmax[1]}°C</td>
    <td>{tempmin[2]}°C-{tempmax[2]}°C</td>
    <td>{tempmin[3]}°C-{tempmax[3]}°C</td>
    <td>{tempmin[4]}°C-{tempmax[4]}°C</td>
  </tr>
  <tr>
    <td>{precip_daily_sum[0]}mm<br><img src = "goutte.png"> {precip_hours_daily[0]}h</td>
    <td>{precip_daily_sum[1]}mm<br><img src = "goutte.png"> {precip_hours_daily[1]}h</td>
    <td>{precip_daily_sum[2]}mm<br><img src = "goutte.png"> {precip_hours_daily[2]}h</td>
    <td>{precip_daily_sum[3]}mm<br><img src = "goutte.png"> {precip_hours_daily[3]}h</td>
    <td>{precip_daily_sum[4]}mm<br><img src = "goutte.png"> {precip_hours_daily[4]}h</td>
  </tr>
  <tr>
    <td>
      {vent_moy[0]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[0]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td>
      {vent_moy[1]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[1]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td>
      {vent_moy[2]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[2]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td>
      {vent_moy[3]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[3]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
    <td>
      {vent_moy[4]}km/h
      <br>
      <div style="width: 20px; height: 20px; overflow: hidden; transform: rotate({wind_direc_daily[4]}deg); display: inline-block; margin: 0 auto;">
        <div style="width: 0; height: 0; border-left: 5px solid transparent; border-right: 5px solid transparent; border-bottom: 15px solid black;">
        </div>
      </div>
    </td>
  </tr>
  <tr>
    <td>{sunrisechanged[0]} - {sunsetchanged[0]}</td>
    <td>{sunrisechanged[1]} - {sunsetchanged[1]}</td>
    <td>{sunrisechanged[2]} - {sunsetchanged[2]}</td>
    <td>{sunrisechanged[3]} - {sunsetchanged[3]}</td>
    <td>{sunrisechanged[4]} - {sunsetchanged[4]}</td>
  </tr>
</table>
"""

# HTML table rendering
display(HTML(tabledaily))
```







