---
execute:
    echo: false
---
```{python}
import pandas as pd
import requests
import json
import csv
```

```{python}
# Initialisation images WMO
with open("descriptions.json") as json_file:
    descriptions = json.load(json_file)


# Boucle d'images
for code_wmo, value in descriptions.items():
    description = value["description"]
    image_url = value["image"]

#Fonction qui renvoie l'url de l'image
def image_url(code_wmo):
    if code_wmo in descriptions:
        return descriptions[code_wmo]["image"]
    else:
        return "Code WMO non trouvé"
```

# NOW
```{python}
"""
DATA NOW
"""
url_current = "https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&current=temperature_2m,precipitation,weathercode,windspeed_10m,winddirection_10m&timezone=Europe%2FLondon"

response_current = requests.get(url_current)

# Vérification de l'url
if response_current.status_code == 200:
    data_current = response_current.json()

    # Création dataframe current
    df_current = pd.DataFrame(data_current)
    # print(df_current.iloc[:, -1])

    # Création csv associé
    df_current.to_csv("df_current.csv", index=False)

    # Extraction data current
    date_now = data_current["current"]["time"][:10]
    # print(date_now)
    temp_now = data_current["current"]["temperature_2m"]
    precip_now = data_current["current"]["precipitation"]
    wmo_now = data_current["current"]["weathercode"]
    strwmonow = f"{wmo_now}"
    wind_now = data_current["current"]["windspeed_10m"]
    wind_direc_now = data_current["current"]["winddirection_10m"]

#Création dataframe pour le rendu tableau
data_tab_now = {
    "Date": [date_now],
    "Température": [temp_now],
    "WMO": [image_url(strwmonow)],
    "Précipitation": [precip_now],
    "Vent": [wind_now],
    "Direction": [wind_direc_now],
}
df_tab_now = pd.DataFrame(data_tab_now)
```

```{python}
from IPython.display import Markdown, display, HTML
from PIL import Image
from tabulate import tabulate
imagenow = image_url(strwmonow)
respnow = requests.get(imagenow, stream=True)
imgnow=Image.open(respnow.raw)
display(imgnow)
```

```{python}
datanow = [
    [
        date_now,
        temp_now,
        precip_now,
        wind_now,
        wind_direc_now,
    ]
]
headersnow = ["Date", "Température", "Précipitations", "Vent", "Direction"]

tablenow = tabulate(datanow, headersnow, showindex=False, tablefmt="pipe")

display(Markdown(tablenow))
#Markdown(tabulate(datanow, headersnow, showindex=False))
# print(df_tab_now.to_markdown(tablefmt="grid", index=False))
```

```{python}
#faire un tableau avec des séparateurs et une fonction join?
# a priori pas besoin de séparateurs de lignes
#comment display l'image dedans?

import markdown

# Liste des données du tableau
tableau = [
    ["En-tête 1", "En-tête 2", "En-tête 3"],
    ["![Image 1](imagenow)", "![Image 2](imagenow)", "![Image 3](imgnow)"],
    ["Ligne 2, Colonne 1", "Ligne 2, Colonne 2", "Ligne 2, Colonne 3"],
    ["![Image 4](imagenow)", "Ligne 4, Colonne 2", "Ligne 4, Colonne 3"]
]

# Convertir le tableau en Markdown
tableau_markdown = "\n".join([" | ".join(row) for row in tableau])

# Afficher le rendu HTML
print(tableau_markdown)


```

# FORECAST


> insérer tableau  
> graphique évolution température 7 prochain jours avec curseur pour se déplacer





